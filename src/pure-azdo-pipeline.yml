trigger:
    - "second-azdo-pipeline"
    
variables:
    major: 1
    minor: 1
name: $(major).$(minor).$(Rev:r)

stages:
- stage: 'Integration_Build'
  displayName: 'Build Application'

  jobs:
    - job: 'Build'
      displayName: 'Build job'
      pool:
        vmImage: 'windows-latest'
      variables:
      - group: Integration-Build
      steps:
      # Dependencies
      - task: UseDotNet@2
        displayName: 'Install SDK 8.0.100'
        inputs:
          packageType: 'sdk'
          version: '8.0.100'
      - task: UseDotNet@2
        inputs:
          packageType: 'runtime'
          version: '6.0.0'
      - task: UseDotNet@2
        inputs:
          packageType: 'runtime'
          version: '8.0.0'
      # Set environment variables
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            [System.Environment]::SetEnvironmentVariable('Version','$(Build.BuildNumber)')
            echo $env:Version
            echo $(Build.BuildNumber)

      - task: PowerShell@2
        displayName: Build.ps1
        inputs:
          targetType: filePath
          filePath: ./build.ps1
          arguments: '; CIBuild'
      - task: PublishTestResults@2
        displayName: 'Publish Test Results ./build/test/*.trx'
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: 'build/test/**/*.trx'
          mergeTestResults: true
          testRunTitle: 'CI Tests'
        continueOnError: true
        condition: succeededOrFailed()
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage UnitTests'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/build/test/**/In/**/coverage.cobertura.xml'
      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '.\build\*.nupkg'
          publishVstsFeed: '$(AzureFeedName)'

    - job: 'DockerBuildandPush'
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        - group: Pure-Azure-Build
      dependsOn: Build
 
      steps:
      - task: DownloadPackage@1
        displayName: 'Download UI Package'
        inputs:
          packageType: 'nuget'
          feed: '$(AzureFeedName)'
          view: 'Local'
          definition: 'ChurchBulletin.UI'
          version: '$(Build.BuildNumber)'
          downloadPath: '$(System.DefaultWorkingDirectory)/built'
          extract: true

      - task: Docker@2
        inputs:
          containerRegistry: 'OnionArchitectureMauiDotnet8AzDO'
          repository: 'ChurchBulletin.UI'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
          tags: |
            $(Build.BuildNumber)

# Deploying to TDD
- stage: 'TDD'
  displayName: 'TDD'
  jobs:
    - deployment: 'DeployToTDD'
      pool:
        vmImage: 'windows-latest'
      variables:
      - group: Pure-Azure-Build
      - name: branch
        value: $[coalesce(variables['system.pullRequest.sourceBranch'], variables['build.sourceBranch'])]
      - name: TDDResourceGroup
        value: '$(ResourceGroupName)-TDD-$(Build.BuildNumber)'
      - name: ContainerImage
        value: '$(RegistryLoginServer)/churchbulletin.ui:$(Build.BuildNumber)'
      environment: 'TDD'
      strategy:
        runOnce:
          deploy:
            steps:

            - task: AzureCLI@2
              displayName: 'Query and store subscription id for unique resource name'
              inputs:
                azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  SUBSCRIPTION_ID=$(az account show --query id --output tsv)
                  echo "##vso[task.setvariable variable=SubscriptionId]$SUBSCRIPTION_ID"

            - checkout: self

            - task: AzureCLI@2
              displayName: 'Create resource group'
              inputs:
                azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: az group create --name $(TDDResourceGroup) --location $(AzureLocation)

            - task: PowerShell@2
              displayName: 'Generate version integer for database server name'
              inputs:
                targetType: 'inline'
                script: |
                  [System.Environment]::SetEnvironmentVariable('Version','$(Build.BuildNumber)')
                  $splitVersion = $env:Version -split "\."
                  $stringVer = $splitVersion[-1]
                  $intVer = [int]$stringVer
                  Write-Host "##vso[task.setvariable variable=IntegerVersion]$intVer"

            - task: AzureResourceGroupDeployment@2
              displayName: 'Create database resource in Azure'
              inputs:
                azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
                resourceGroupName: $(TDDResourceGroup)
                location: $(AzureLocation)
                csmFile: src/Database/DatabaseARM.json
                overrideParameters: -databaseserverName $(SubscriptionId)-dotnet8-tdd-$(IntegerVersion) -databaseLogin $(DatabaseUserTest) -databaseLoginPassword $(DatabasePasswordTest) -skuCapacity 1 -databaseName $(DatabaseNameTest) -requestedServiceObjectiveName $(DatabasePerformanceLevel)

            - task: PowerShell@2
              displayName: 'Create database schema'
              inputs:
                targetType: filePath
                filePath: src/Database/scripts/UpdateAzurePipelineSql.ps1
                arguments: -DatabaseServer '$(SubscriptionId)-dotnet8-tdd-$(IntegerVersion).database.windows.net' -DatabaseName '$(DatabaseNameTest)' -DatabaseAction '$(DatabaseAction)' -DatabaseUser '$(DatabaseUserTest)' -DatabasePassword '$(DatabasePasswordTest)'

            - task: AzureCLI@2
              displayName: 'Get database connection string'
              inputs: 
                azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
                scriptType: 'ps'
                scriptLocation: 'inlineScript' 
                inlineScript: |
                  az config set extension.use_dynamic_install=yes_without_prompt
                  $connstring = az sql db show-connection-string --server $(SubscriptionId)-dotnet8-tdd-$(IntegerVersion) --name $(DatabaseNameTest) --client ado.net
                  $connstring = $connstring -replace '<username>', '$(DatabaseUserTest)' -replace '<password>', '$(DatabasePasswordTest)' -replace '"', ''
                  Write-Host "##vso[task.setvariable variable=DbConnString]$connstring"

            - task: AzureResourceGroupDeployment@2
              displayName: 'Create container app environment'
              inputs:
                azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
                resourceGroupName: $(TDDResourceGroup)
                location: $(AzureLocation)
                csmFile: src/Core/ContainerEnvironmentARM.json
                overrideParameters: -location $(AzureLocation) -environment_name $(ResourceGroupName)-TDD-cae

            - task: PowerShell@2
              displayName: 'Debug'
              inputs:
                targetType: 'inline'
                script: |
                  echo "Container app name - $(ContainerAppNameTest)"
                  echo "Location - $(AzureLocation)"
                  echo "Env Name - $(ResourceGroupName)-TDD-cae"
                  echo "Container Img - $(RegistryLoginServer)/churchbulletin.ui:$(Build.BuildNumber)"
                  echo "Db Conn Str - $(DbConnString)"
                  echo "Registry Pw - $(ContainerRegistryPassword)"
                  echo "Http Port - $(HttpPort)"
                  echo "Registry Server - $(RegistryLoginServer)"
                  echo "App Id - $(AcrContainerAppId)"

            - task: AzureResourceGroupDeployment@2
              displayName: 'Create container app'
              inputs:
                azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
                resourceGroupName: $(TDDResourceGroup)
                location: $(AzureLocation)
                csmFile: src/Core/ContainerARM.json
                overrideParameters: -containerappName "$(ContainerAppNameTest)" -location "$(AzureLocation)" -environment_name "$(ResourceGroupName)-TDD-cae" -container_image "$(RegistryLoginServer)/churchbulletin.ui:$(Build.BuildNumber)" -registry_password "$(ContainerRegistryPassword)" -connection_string "$(DbConnString)" -http_port "$(HttpPort)" -registry_login_server "$(RegistryLoginServer)" -app_id "$(AcrContainerAppId)"

            - task: AzureCLI@2
              displayName: 'Get the Fully Qualified Domain Name for the container app'
              inputs:
                azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  $fqdn = az containerapp show --name $(ContainerAppNameTest) --resource-group $(TDDResourceGroup) --query properties.configuration.ingress.fqdn
                  Write-Host "##vso[task.setvariable variable=Fqdn]$fqdn"

            - task: AzureCLI@2
              displayName: 'Add revision to container app'
              inputs:
                azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript:
                  az containerapp update --name $(ContainerAppNameTest) --resource-group $(TDDResourceGroup) --image $(ContainerImage) --set-env-vars ConnectionStrings__SqlConnectionString=$(DbConnString) HTTP_PORT=$(HttpPort) 

            - task: PowerShell@2
              displayName: 'Check version of deployed app'
              inputs:
                targetType: 'filePath'
                filePath: src/UI/Server/CheckVersion.ps1
                arguments: -server "$(Fqdn)" -version "$(Build.BuildNumber)"

            - task: PowerShell@2
              displayName: 'Perform healthcheck for server on container app'
              inputs:
                targetType: 'filePath'
                filePath: src/UI/Server/CallHealthCheckEndpoint.ps1
                arguments: -server "$(Fqdn)"

- stage: 'DeleteTDD'
  displayName: 'DeleteTDD'
  dependsOn: TDD
  jobs: 
    - deployment: 'DeleteTDD'
      pool:
        vmImage: 'windows-latest'
      variables:
      - group: Pure-Azure-Build 
      - name: branch
        value: $[coalesce(variables['system.pullRequest.sourceBranch'], variables['build.sourceBranch'])] 
      - name: TDD-Resource-Group
        value: '$(ResourceGroupName)-TDD-$(Build.BuildNumber)'
      - name: TDD-App-Name
        value: tdd-ui 
      environment: 'TDD'
      strategy:
        runOnce:
          deploy:
            steps:

            - task: AzureCLI@2
              inputs:
                azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az config set extension.use_dynamic_install=yes_without_prompt
                  $containerAppURL = az containerapp show --resource-group $(TDD-Resource-Group) --name $(TDD-App-Name) --query properties.configuration.ingress.fqdn
                  $containerAppURL = $containerAppURL -replace '"', ''
                  [System.Environment]::SetEnvironmentVariable("containerAppURL", $containerAppURL, "User")

            - task: AzureCLI@2
              displayName: 'Delete TDD Resources'
              inputs:
                azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az group delete -n $(TDD-Resource-Group) --yes