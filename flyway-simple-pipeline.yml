trigger:
    #Commenting out branch trigger during testing
    #- "second-azdo-pipeline"
    - none
    
variables:
    major: 2
    minor: 4
name: $(major).$(minor).$(Rev:r)

stages:
- stage: 'Integration_Build'
  displayName: 'Build Application'

  jobs:
    - job: 'Build'
      displayName: 'Build job'
      pool:
        vmImage: 'windows-latest'
      variables:
      - group: onion8-from-scratch-flyway-tdd
      steps:
      # Dependencies
      - task: UseDotNet@2
        displayName: 'Install SDK 8.0.100'
        inputs:
          packageType: 'sdk'
          version: '8.0.100'
      - task: UseDotNet@2
        inputs:
          packageType: 'runtime'
          version: '6.0.0'
      - task: UseDotNet@2
        inputs:
          packageType: 'runtime'
          version: '8.0.0'
      # Set environment variables
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            [System.Environment]::SetEnvironmentVariable('Version','$(Build.BuildNumber)')
            echo $env:Version
            echo $(Build.BuildNumber)

      - task: Cache@2
        inputs:
          key: 'FlywayCLI | $(Agent.OS) | $(FlywayCacheVersion)'
          path: '$(Pipeline.Workspace)\flyway'
          cacheHitVar: 'FLCACHE_RESTORED'
     
      - task: PowerShell@2
        displayName: Build.ps1
        inputs:
          targetType: filePath
          filePath: ./build.ps1
          arguments: '-flywayCliDir "$(Pipeline.Workspace)/flyway"; CIBuild'
      - task: PublishTestResults@2
        displayName: 'Publish Test Results ./build/test/*.trx'
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: 'build/test/**/*.trx'
          mergeTestResults: true
          testRunTitle: 'CI Tests'
        continueOnError: true
        condition: succeededOrFailed()
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage UnitTests'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/build/test/**/In/**/coverage.cobertura.xml'
        
      # - task: PublishPipelineArtifact@1
      #   displayName: Publish Ui to Pipeline
      #   inputs:
      #     targetPath: .\build\WebApp
      #     artifactName: ChurchBulletin.Ui

      # - task: PublishPipelineArtifact@1
      #   displayName: Publish Database to Pipeline
      #   inputs:
      #     targetPath: .\build\WebApp
      #     artifactName: ChurchBulletin.Database
      
      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '.\build\*.nupkg'
          publishVstsFeed: '$(AzureFeedName)'

    - job: 'DockerBuildandPush'
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        - group: onion8-from-scratch-flyway-tdd
      dependsOn: Build
 
      steps:
      - task: DownloadPackage@1
        displayName: 'Download UI Package'
        inputs:
          packageType: 'nuget'
          feed: '$(AzureFeedName)'
          view: 'Local'
          definition: 'ChurchBulletin.UI'
          version: '$(Build.BuildNumber)'
          downloadPath: '$(System.DefaultWorkingDirectory)/built'
          extract: true

      # - task: DownloadPipelineArtifact@2
      #   displayName: Publish Ui to Pipeline
      #   inputs:
      #     targetPath: $(System.DefaultWorkingDirectory)/built
      #     artifactName: ChurchBulletin.Ui

      - task: Docker@2
        inputs:
          containerRegistry: 'Onion-Architecture-Dotnet-8-Flyway-Azure-SC'
          repository: 'ChurchBulletin.UI'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
          tags: |
            $(Build.BuildNumber)

